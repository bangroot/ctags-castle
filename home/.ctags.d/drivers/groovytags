#!/usr/bin/env groovy

import org.codehaus.groovy.ast.*
import org.codehaus.groovy.ast.expr.*
import org.codehaus.groovy.ast.stmt.*
import org.codehaus.groovy.classgen.BytecodeExpression
import org.codehaus.groovy.control.CompilePhase
import java.lang.reflect.Modifier
import org.codehaus.groovy.control.CompilationUnit
import org.codehaus.groovy.control.CompilerConfiguration
import org.codehaus.groovy.control.CompilationFailedException
import org.codehaus.groovy.classgen.GeneratorContext
import org.codehaus.groovy.control.SourceUnit
import org.codehaus.groovy.control.CompilationUnit.PrimaryClassNodeOperation
import org.codehaus.groovy.classgen.Verifier

if (!args) {
	println "At least one argument is required."
	System.exit(1)
}
if (args[0].startsWith("--list-kinds")) {
	println "c classes"
	println "f fields"
	println "i interfaces"
	println "m methods"
	println "p packages"
	System.exit(0)
}

def script = new File(args[0]).text
def writer = new StringWriter()
def  classLoader = new GroovyClassLoader(getClass().classLoader)
def compilePhase = CompilePhase.CONVERSION.phaseNumber

def scriptName = 'script' + System.currentTimeMillis() + '.groovy'
GroovyCodeSource codeSource = new GroovyCodeSource(script, scriptName, '/groovy/script')
CompilationUnit cu = new CompilationUnit(CompilerConfiguration.DEFAULT, codeSource.codeSource, classLoader)
cu.addPhaseOperation(new AstNodeToScriptVisitor(args[0], writer, true), compilePhase) 

cu.addSource(codeSource.getName(), script)
try {
	cu.compile(compilePhase)
} catch (CompilationFailedException cfe) {

	writer.println 'Unable to produce AST for this phase due to earlier compilation error:'
	cfe.message.eachLine {
		writer.println it
	}
	writer.println 'Fix the above error(s) and then press Refresh'
} catch (Throwable t) {
	writer.println 'Unable to produce AST for this phase due to an error:'
	writer.println t.getMessage()
	writer.println 'Fix the above error(s) and then press Refresh'
	println writer.toString()
	System.exit(1)
}
println "!_TAG_FILE_FORMAT       2       /extended format/"
println "!_TAG_FILE_SORTED       0       /0=unsorted, 1=sorted, 2=foldcase/"
println "!_TAG_PROGRAM_AUTHOR    Dave Brown  /bangroot@gmail.com/"
println "!_TAG_PROGRAM_NAME      groovytags      //"
println "!_TAG_PROGRAM_URL       https://github.com/bangroot/ctags-castle     /GitHub repository/"
println "!_TAG_PROGRAM_VERSION   0.1.0   //"
println writer.toString()
System.exit(0)

class AstNodeToScriptVisitor extends PrimaryClassNodeOperation implements GroovyClassVisitor {
	private static final String WHITESPACE = "[ \\t]*"

	private final Writer _out
	Stack<String> classNameStack = new Stack<String>()
	String _indent = ''
	boolean readyToIndent = true
	boolean showScriptClass
	String fileName
	List<String> lines

	def AstNodeToScriptVisitor(String fileName, Writer writer, boolean showScriptClass = true) {
		this.fileName = fileName
		this._out = writer
		this.showScriptClass = showScriptClass
		lines = new File(fileName).readLines()
	}

	void call(SourceUnit source, GeneratorContext context, ClassNode classNode) {
		visitPackage(source?.getAST()?.getPackage())

		if (showScriptClass || !classNode.isScript()) {
			visitClass classNode
		}
	}

	void print(parameter) {
		def output = parameter.toString()

		if (readyToIndent) {
			_out.print _indent
			readyToIndent = false
			while (output.startsWith(' ')) {
				output = output[1..-1]  // trim left
			}
		}
		if (_out.toString().endsWith(' ')) {
			if (output.startsWith(' ')) {
				output = output[1..-1]
			}
		}
		_out.print output
	}

	def println(parameter) {
		throw new UnsupportedOperationException('Wrong API')
	}

	def indented(Closure block) {
		String startingIndent = _indent
		_indent = _indent + '    '
		block()
		_indent = startingIndent
	}

	def printLineBreak() {
		if (!_out.toString().endsWith('\n')) {
			_out.print '\n'
		}
		readyToIndent = true
	}

	def printDoubleBreak() {
		if (_out.toString().endsWith('\n\n')) {
			// do nothing
		} else if (_out.toString().endsWith('\n')) {
			_out.print '\n'
		} else {
			_out.print '\n'
			_out.print '\n'
		}
		readyToIndent = true
	}

	String getAccessString(int mods) {
		switch (true) {
			case Modifier.isPublic(mods):
				return "public"
			case Modifier.isProtected(mods):
				return "protected"
			default:
				return "private"
		}
	}

	void visitPackage(PackageNode node) {

		if (node) {
			def packName
			def packLine
			if (node.name.endsWith('.')) {
				packName = node.name[0..-2]
				packLine = node.text[0..-2]
			} else {
				packName = node.name
				packLine = node.text
			}
			int lineNumber = getRealLineNumber(node)
			_out.println "${packName}\t${fileName}\t/^${lines.get(lineNumber)}\$/;\"\tp\tline:${lineNumber + 1}"
		}
	}

	@Override
	void visitClass(ClassNode node) {

		classNameStack.push(node.nameWithoutPackage)

		int lineNumber = getRealLineNumber(node)
		
		_out.println "${node.nameWithoutPackage}\t${fileName}\t/^${lines.get(lineNumber)}\$/;\"\tc\taccess:${getAccessString(node.modifiers)}\tline:${lineNumber + 1}"
		node?.properties?.each { visitProperty(it) }
		printLineBreak()
		node?.fields?.each { visitField(it) }
		printDoubleBreak()
		node?.declaredConstructors?.each { visitConstructor(it) }
		printLineBreak()
		node?.methods?.each { visitMethod(it) }
		classNameStack.pop()
	}

	@Override
	void visitConstructor(ConstructorNode node) {
		visitMethod(node)
	}

	@Override
	void visitMethod(MethodNode node) {
		int lineNumber = getRealLineNumber(node)
		if (node.name == '<init>') {
			_out.println "${classNameStack.peek()}\t${fileName}\t/^${lines.get(lineNumber)}\$/;\"\tm\tclass:${classNameStack.peek()}\taccess:${getAccessString(node.modifiers)}\tsignature:(${getSignature(node.parameters)})\tline:${lineNumber + 1}"
		} else if (node.name == '<clinit>') {
			//do nothing with static initializers
		} else {
				_out.println "${node.name}\t${fileName}\t/^${lines.get(lineNumber)}\$/;\"\tm\tclass:${classNameStack.peek()}\taccess:${getAccessString(node.modifiers)}\tsignature:(${getSignature(node.parameters)})\tline:${lineNumber + 1}"
		}
	}

	String getSignature(Parameter[] params) {
		return params.collect({ p ->
			if (p.isDynamicTyped()) {
				return "def ${p.name}"
			} else {
				return "${p.type.nameWithoutPackage} ${p.name}"
			}
		}).join(",")
	}

	void visitField(FieldNode node) {
		int lineNumber = getRealLineNumber(node)
		_out.println "${node.name}\t${fileName}\t/^${lines.get(lineNumber)}\$/;\"\tf\tclass:${classNameStack.peek()}\taccess:${getAccessString(node.modifiers)}\tline:${lineNumber + 1}"
	}
	
	@Override
	void visitProperty(PropertyNode node) {
		// is a FieldNode, avoid double dispatch
	}

	int getRealLineNumber(def node) {
		if (node instanceof AnnotatedNode && node.annotations) {
			int maxAnnotationLine = node.lineNumber
			node.annotations.each {
				maxAnnotationLine = Math.max(maxAnnotationLine, it.lineNumber)	
			}
			return maxAnnotationLine
		} else {
			return node.lineNumber - 1
		}
	}

	/**
	 * Prints out the type, safely handling arrays.
	 * @param classNode
	 *      classnode
	 */
	void visitType(ClassNode classNode) {
		def name = classNode.name
		if (name =~ /^\[+L/ && name.endsWith(';')) {
			int numDimensions = name.indexOf('L')
			print "${classNode.name[(numDimensions + 1)..-2]}" + ('[]' * numDimensions)
		} else {
			print name
		}
	}

}
